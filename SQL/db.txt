what is database ?
- it is a collection of data in a format that can be easily accessed

why db?
- 1.can store large data
  2.features like security,scalability,etc
  3. easier to inserr,update or delete , etc

DBMS ?
- it is an additional layer above database which is used to organise data in database and handles all the queries for 
  updation and retrieval of data from db.

SQL Vs NOSQL ?
- SQL : Relational db(tabular) 
 1. MYSQL, Oracle, PostgreSQL,etc

- NOSQL: non relational db > documents(key:val,graph,etc)
  1. MONGOdb, cassandra,Neo4j,etc, collection of db.

sql :- it is a programming language used to interact with relational db.
      it is a query language used to interact with relational db.

what is a table ?
- collection of row and column in a database.
- where column categorized the schema(design of the table) like id, name ,email, etc
- Row categorized the user distinctly with n numbers and also knwon as tuple(i.e single row)

Table queries:
create insert update alter truncate delete

-create table table_name(col_name,datatype,......);
-create databse database_name;
-show databases;
-drop database db_name;
-use db_name;
-create database if not exists db_name;


Constraint,

Not Null - columns cannot have a null value
unique - all values in column are different
default - set the default value of the column
check - it can limit the values allowed in a column 
        syntax constraint check(condition1 and condition2...)

key constraints: special columns in the table

Primary key - makes a column unique and not null but used only for one in a table.
              syntax create table tempo(id int not null,primary key(id));
            
            - it is a column or set of columns in a table that uniquely identifies each row in a table.
      
Foreign key - prevent action that would destroy link between the tables.
              syntax create table tempoo(cust_id int,name,purchase, foreign key(cust_id) references temp(id));

            - a foreign key is a column or set of column in a table that refers to  the primary key in a table and 
              reference to another table as a foreign key .
            
            - FK can have duplicates and null values

            - There can be multiple foreign key in a table.


select command: 

- select col1,col2,.. from table_name;
- select * from table_name; (show all the data of the table)
- select distinct age from table_name;(return tuple of same values as one)


where clause : to efine some conditions

- select col1, col2, from table_name where condition;
operators in where :

- arithmetic operators : + - * / %
- comparison operator : = != > < >= <=
- logical operators : AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY
- bitwise : &, |

Frequently used operator :
- AND : to check for both condition to be true
- OR : to check for either of the condtion is true
- BETWEEN : select for a given range
- In : mathces any value in the list
- NOT : to nragte the given condition

+-----+------+---------------+-----------------+-----------+-----------+
| ID  | age  | NAME          | email           | Followers | FOLLOWING |
+-----+------+---------------+-----------------+-----------+-----------+
| 100 |   18 | Aditya Gupta  | adi@gmail.com   |       150 |       100 |
| 101 |   17 | Sonal Tiwari  | sona@gmail.com  |       300 |       100 |
| 102 |   18 | Raghu Gupta   | raghu@gmail.com |       300 |       100 |
| 103 |   19 | Abhi Kushwaha | abhi@gmail.com  |       300 |       100 |
| 104 |   19 | MG Gupta      | mg@gmail.com    |       300 |       100 |
+-----+------+---------------+-----------------+-----------+-----------+

mysql> select name,age,followers from user where age >17 and followers >150;
+---------------+------+-----------+
| name          | age  | followers |
+---------------+------+-----------+
| Raghu Gupta   |   18 |       300 |
| Abhi Kushwaha |   19 |       300 |
| MG Gupta      |   19 |       300 |
+---------------+------+-----------+

mysql> select name,age,followers from user where age >17 or followers >150;

+---------------+------+-----------+
| name          | age  | followers |
+---------------+------+-----------+
| Aditya Gupta  |   18 |       150 |
| Sonal Tiwari  |   17 |       300 |
| Raghu Gupta   |   18 |       300 |
| Abhi Kushwaha |   19 |       300 |
| MG Gupta      |   19 |       300 |
+---------------+------+-----------+

mysql> select name,age,followers from user where age between 17 and 20;

+---------------+------+-----------+
| name          | age  | followers |
+---------------+------+-----------+
| Aditya Gupta  |   18 |       150 |
| Sonal Tiwari  |   17 |       300 |
| Raghu Gupta   |   18 |       300 |
| Abhi Kushwaha |   19 |       300 |
| MG Gupta      |   19 |       300 |
+---------------+------+-----------+


mysql> select name,age,followers from user where age between 12 and 15;
Empty set (0.00 sec)

mysql> select * from user where email in  ('adi@gmail.com','raghu@gmail.com');
+-----+------+--------------+-----------------+-----------+-----------+
| ID  | age  | NAME         | email           | Followers | FOLLOWING |
+-----+------+--------------+-----------------+-----------+-----------+
| 100 |   18 | Aditya Gupta | adi@gmail.com   |       150 |       100 |
| 102 |   18 | Raghu Gupta  | raghu@gmail.com |       300 |       100 |
+-----+------+--------------+-----------------+-----------+-----------+


mysql> select * from user where email not in  ('adi@gmail.com','raghu@gmail.
com');
+-----+------+---------------+----------------+-----------+-----------+
| ID  | age  | NAME          | email          | Followers | FOLLOWING |
+-----+------+---------------+----------------+-----------+-----------+
| 103 |   19 | Abhi Kushwaha | abhi@gmail.com |       300 |       100 |
| 104 |   19 | MG Gupta      | mg@gmail.com   |       300 |       100 |
| 101 |   17 | Sonal Tiwari  | sona@gmail.com |       300 |       100 |
+-----+------+---------------+----------------+-----------+-----------+

Limit Clause : sets an uppe limit on number of tuples to be returned.

- new table
+-----+------+---------------+------------------+-----------+-----------+
| ID  | age  | NAME          | email            | Followers | FOLLOWING |
+-----+------+---------------+------------------+-----------+-----------+
| 100 |   18 | Aditya Gupta  | adi@gmail.com    |       150 |       100 |
| 101 |   17 | Sonal Tiwari  | sona@gmail.com   |       300 |       100 |
| 102 |   18 | Raghu Gupta   | raghu@gmail.com  |       300 |       100 |
| 103 |   19 | Abhi Kushwaha | abhi@gmail.com   |       300 |       100 |
| 104 |   19 | MG Gupta      | mg@gmail.com     |       300 |       100 |
| 105 |   20 | Priya Singh   | priya@gmail.com  |       200 |       150 |
| 106 |   21 | Rohan Mehta   | rohan@gmail.com  |       350 |       250 |
| 107 |   18 | Aisha Khan    | aisha@gmail.com  |       220 |       180 |
| 108 |   22 | Vikas Sharma  | vikas@gmail.com  |       180 |       130 |
| 109 |   20 | Sneha Patel   | sneha@gmail.com  |       260 |       210 |
| 110 |   21 | Aman Verma    | aman@gmail.com   |       320 |       270 |
| 111 |   19 | Kiran Rao     | kiran@gmail.com  |       400 |       300 |
| 112 |   23 | Farhan Ali    | farhan@gmail.com |       280 |       230 |
| 113 |   24 | Reema Das     | reema@gmail.com  |       150 |       100 |
| 114 |   18 | Arjun Kapoor  | arjun@gmail.com  |       370 |       320 |
+-----+------+---------------+------------------+-----------+-----------+


mysql> select name,age,followers from user where age >18 limit 2;
+---------------+------+-----------+
| name          | age  | followers |
+---------------+------+-----------+
| Abhi Kushwaha |   19 |       300 |
| MG Gupta      |   19 |       300 |
+---------------+------+-----------+


Order by clause: to sort in ascending(ASC) or descending order(DESC)
mysql> select *  from user order by age asc;

+-----+------+---------------+------------------+-----------+-----------+
| ID  | age  | NAME          | email            | Followers | FOLLOWING |
+-----+------+---------------+------------------+-----------+-----------+
| 101 |   17 | Sonal Tiwari  | sona@gmail.com   |       300 |       100 |
| 100 |   18 | Aditya Gupta  | adi@gmail.com    |       150 |       100 |
| 102 |   18 | Raghu Gupta   | raghu@gmail.com  |       300 |       100 |
| 107 |   18 | Aisha Khan    | aisha@gmail.com  |       220 |       180 |
| 114 |   18 | Arjun Kapoor  | arjun@gmail.com  |       370 |       320 |
| 103 |   19 | Abhi Kushwaha | abhi@gmail.com   |       300 |       100 |
| 104 |   19 | MG Gupta      | mg@gmail.com     |       300 |       100 |
| 111 |   19 | Kiran Rao     | kiran@gmail.com  |       400 |       300 |
| 105 |   20 | Priya Singh   | priya@gmail.com  |       200 |       150 |
| 109 |   20 | Sneha Patel   | sneha@gmail.com  |       260 |       210 |
| 106 |   21 | Rohan Mehta   | rohan@gmail.com  |       350 |       250 |
| 110 |   21 | Aman Verma    | aman@gmail.com   |       320 |       270 |
| 108 |   22 | Vikas Sharma  | vikas@gmail.com  |       180 |       130 |
| 112 |   23 | Farhan Ali    | farhan@gmail.com |       280 |       230 |
| 113 |   24 | Reema Das     | reema@gmail.com  |       150 |       100 |
+-----+------+---------------+------------------+-----------+-----------+

mysql> select *  from user where age > 18 order by age asc;

+-----+------+---------------+------------------+-----------+-----------+
| ID  | age  | NAME          | email            | Followers | FOLLOWING |
+-----+------+---------------+------------------+-----------+-----------+
| 103 |   19 | Abhi Kushwaha | abhi@gmail.com   |       300 |       100 |
| 104 |   19 | MG Gupta      | mg@gmail.com     |       300 |       100 |
| 111 |   19 | Kiran Rao     | kiran@gmail.com  |       400 |       300 |
| 105 |   20 | Priya Singh   | priya@gmail.com  |       200 |       150 |
| 109 |   20 | Sneha Patel   | sneha@gmail.com  |       260 |       210 |
| 106 |   21 | Rohan Mehta   | rohan@gmail.com  |       350 |       250 |
| 110 |   21 | Aman Verma    | aman@gmail.com   |       320 |       270 |
| 108 |   22 | Vikas Sharma  | vikas@gmail.com  |       180 |       130 |
| 112 |   23 | Farhan Ali    | farhan@gmail.com |       280 |       230 |
| 113 |   24 | Reema Das     | reema@gmail.com  |       150 |       100 |
+-----+------+---------------+------------------+-----------+-----------+

Aggregate function: to perform a calculations on set of values and return a single value.

- COUNT()
- MAX()
- MIN()
- SUM()
- AVG()

- syntax : select max(followers) from student;

mysql> select max(followers) from user;
+----------------+
| max(followers) |
+----------------+
|            400 |
+----------------+

mysql> select min(age) from user;
+----------+
| min(age) |
+----------+
|       17 |
+----------+  

mysql> select count(age) from user;
+------------+
| count(age) |
+------------+
|         15 |
+------------+

mysql> select count(age) from user where age > 18;
+------------+
| count(age) |
+------------+
|         10 |
+------------+

mysql> select avg(followers) from user;
+----------------+
| avg(followers) |
+----------------+
|       272.0000 |
+----------------+

mysql> select sum(followers) from user;
+----------------+
| sum(followers) |
+----------------+
|           4080 |
+----------------+


Group By clause : group rows that have same values into summary rows.
                - it collects data from multiple records and group the result by one or more column

- syntax : select col1,col2 from table_name group by col_name(s);
- generally we use group by with some aggregation function.

mysql> select age from user group by(age);
+------+
| age  |
+------+
|   18 |
|   17 |
|   19 |
|   20 |
|   21 |
|   22 |
|   23 |
|   24 |
+------+

mysql> select count(id) from user group by(age);
+-----------+
| count(id) |
+-----------+
|         4 |
|         1 |
|         3 |
|         2 |
|         2 |
|         1 |
|         1 |
|         1 |
+-----------+

mysql> select age, max(followers) from user group by(age);
+------+----------------+
| age  | max(followers) |
+------+----------------+
|   18 |            370 |
|   17 |            300 |
|   19 |            400 |
|   20 |            260 |
|   21 |            350 |
|   22 |            180 |
|   23 |            280 |
|   24 |            150 |
+------+----------------+


Having clause: similar to where clause i.e applies some condition on rows.
- but it is used when we want to apply any condition after grouping.

- select col, col2 from table_name group by col_name(s) having condition;
- where is for the table , having is for a group
- grouping is necessary for having.

mysql> select age, max(followers) from user group by(age) having max(followers) > 200;
+------+----------------+
| age  | max(followers) |
+------+----------------+
|   18 |            370 |
|   17 |            300 |
|   19 |            400 |
|   20 |            260 |
|   21 |            350 |
|   23 |            280 |
+------+----------------+


General order: 
1.select col(s)
2.from table_name
3.where condition
4.group by col(s)
5.having condition
6.order by column(s) ASC

mysql> select age, max(followers) from user where age between 17 and 20 grou
p by(age) having max(followers) > 200 order by age desc;
+------+----------------+
| age  | max(followers) |
+------+----------------+
|   20 |            260 |
|   19 |            400 |
|   18 |            370 |
|   17 |            300 |
+------+----------------+

UPDATE: to update existing rows
- syntax : update tb_name set col1 = val1,col2=val2 where condition;

- set sql_safe_updates = 0; (to set if sql not allows)

mysql> update user set followers = 1000 where id = 100;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from user;
+-----+------+---------------+------------------+-----------+-----------+
| ID  | age  | NAME          | email            | Followers | FOLLOWING |
+-----+------+---------------+------------------+-----------+-----------+
| 100 |   18 | Aditya Gupta  | adi@gmail.com    |      1000 |       100 |
| 101 |   17 | Sonal Tiwari  | sona@gmail.com   |       300 |       100 |
| 102 |   18 | Raghu Gupta   | raghu@gmail.com  |       300 |       100 |
| 103 |   19 | Abhi Kushwaha | abhi@gmail.com   |       300 |       100 |
| 104 |   19 | MG Gupta      | mg@gmail.com     |       300 |       100 |
| 105 |   20 | Priya Singh   | priya@gmail.com  |       200 |       150 |
| 106 |   21 | Rohan Mehta   | rohan@gmail.com  |       350 |       250 |
| 107 |   18 | Aisha Khan    | aisha@gmail.com  |       220 |       180 |
| 108 |   22 | Vikas Sharma  | vikas@gmail.com  |       180 |       130 |
| 109 |   20 | Sneha Patel   | sneha@gmail.com  |       260 |       210 |
| 110 |   21 | Aman Verma    | aman@gmail.com   |       320 |       270 |
| 111 |   19 | Kiran Rao     | kiran@gmail.com  |       400 |       300 |
| 112 |   23 | Farhan Ali    | farhan@gmail.com |       280 |       230 |
| 113 |   24 | Reema Das     | reema@gmail.com  |       150 |       100 |
| 114 |   18 | Arjun Kapoor  | arjun@gmail.com  |       370 |       320 |
+-----+------+---------------+------------------+-----------+-----------+


